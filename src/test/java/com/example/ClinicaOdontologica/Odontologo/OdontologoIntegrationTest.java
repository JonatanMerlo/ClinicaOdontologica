package com.example.ClinicaOdontologica.Odontologo;

import com.example.ClinicaOdontologica.entities.Odontologo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class OdontologoIntegrationTest {

    static private Odontologo sampleOdont;
    private final ObjectWriter writer = new ObjectMapper().configure(SerializationFeature.WRAP_ROOT_VALUE, false).writer();
    private final ObjectMapper mapper = new ObjectMapper();
    @Autowired
    private MockMvc mockMvc;

    static public void assertPropertiesEquality(Odontologo pac, Odontologo pac2) {
        Assertions.assertEquals(pac.getId(), pac2.getId());
        Assertions.assertEquals(pac.getNombre(), pac2.getNombre());
        Assertions.assertEquals(pac.getApellido(), pac2.getApellido());
        Assertions.assertEquals(pac.getMatricula(), pac2.getMatricula());
    }

    @BeforeAll
    static void loadSampleOdont() {

        Odontologo odont = new Odontologo();
        odont.setNombre("Jonatan");
        odont.setApellido("Merlo");
        odont.setMatricula("40592");

        sampleOdont = odont;
    }

    // ---------- Los metodos son {metodo}_{input}_{outputEsperado} ----------
    @Test
    @Order(1)
    public void add_OdontologoJson_ResponseIsOkAndNonEmpty() throws Exception {
        String requestJson = writer.writeValueAsString(sampleOdont);

        MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                        .post("/odontologos")
                        .characterEncoding("UTF-8")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestJson)
                ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andReturn();

        String responseJson = result.getResponse().getContentAsString();
        sampleOdont = mapper.readValue(responseJson, Odontologo.class);

        Assertions.assertFalse(responseJson.isEmpty());
    }

    @Test
    @Order(2)
    public void get_AutogeneratedId_ResponseIsOkAndEqualToSampleOdontologo() throws Exception {
        MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                        .get("/odontologos/{id}", sampleOdont.getId())
                ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content()
                        .contentType(MediaType.APPLICATION_JSON)
                ).andReturn();

        String responseJson = result.getResponse().getContentAsString();
        Odontologo responseObject = mapper.readValue(responseJson, Odontologo.class);

        assertPropertiesEquality(sampleOdont, responseObject);
    }

    @Test
    @Order(3)
    public void modify_modifiedOdontologoJson_ResponseIsOkAndEqualToModifiedOdontologo() throws Exception {
        sampleOdont.setNombre("Emmanuel");
        String requestJson = writer.writeValueAsString(sampleOdont);

        MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                        .put("/odontologos/{id}", sampleOdont.getId())
                        .characterEncoding("UTF-8")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestJson)
                ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andReturn();

        String responseJson = result.getResponse().getContentAsString();
        Odontologo responseObject = mapper.readValue(responseJson, Odontologo.class);

        assertPropertiesEquality(sampleOdont, responseObject);
    }

    @Test
    @Order(4)
    public void remove_AutogeneratedId_ResponseStatusIsNoContent() throws Exception {
       MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                        .delete("/odontologos/{id}", sampleOdont.getId())
                ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andReturn();


        String responseJson = result.getResponse().getContentAsString();
        Assertions.assertEquals("Eliminado",responseJson);


    }

    @Test
    @Order(5)
    public void get_DeletedId_ThrowsEntityNotFound() throws Exception {
        MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                        .get("/odontologos/{id}", sampleOdont.getId())
                ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isNotFound())
                .andExpect(MockMvcResultMatchers.content()
                        .contentType("text/plain;charset=UTF-8")).andReturn();

        String responseJson = result.getResponse().getContentAsString();
        Assertions.assertEquals("No existe un odontologo con el id " + sampleOdont.getId(),responseJson);

    }
}
